<?php

namespace Admin\Providers;

use Admin\Console\ActionCommand;
use Admin\Console\AdminCommand;
use Admin\Console\ConfigCommand;
use Admin\Console\ControllerCommand;
use Admin\Console\CreateUserCommand;
use Admin\Console\ExportSeedCommand;
use Admin\Console\ExtendCommand;
use Admin\Console\FormCommand;
use Admin\Console\GenerateMenuCommand;
use Admin\Console\ImportCommand;
use Admin\Console\InstallCommand;
use Admin\Console\MakeCommand;
use Admin\Console\MenuCommand;
use Admin\Console\MinifyCommand;
use Admin\Console\PermissionCommand;
use Admin\Console\PublishCommand;
use Admin\Console\ResetPasswordCommand;
use Admin\Console\UninstallCommand;
use Admin\Http\Middleware\AdminAuthenticate;
use Admin\Http\Middleware\Bootstrap;
use Admin\Http\Middleware\LogOperation;
use Admin\Http\Middleware\Permission;
use Admin\Http\Middleware\Pjax;
use Admin\Http\Middleware\Session;
use Admin\Layout\Content;
use Illuminate\Routing\Router;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Blade;
use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Str;

class AdminServiceProvider extends ServiceProvider
{
    /**
     * @var array
     */
    protected $commands = [
       AdminCommand::class,
       MakeCommand::class,
       ControllerCommand::class,
       MenuCommand::class,
       InstallCommand::class,
       PublishCommand::class,
       UninstallCommand::class,
       ImportCommand::class,
       CreateUserCommand::class,
       ResetPasswordCommand::class,
       ExtendCommand::class,
       ExportSeedCommand::class,
       MinifyCommand::class,
       FormCommand::class,
       PermissionCommand::class,
       ActionCommand::class,
       GenerateMenuCommand::class,
       ConfigCommand::class,
    ];

    /**
     * The application's route middleware.
     *
     * @var array
     */
    protected $routeMiddleware = [
        'admin.auth'       => AdminAuthenticate::class,
        'admin.pjax'       => Pjax::class,
        'admin.log'        => LogOperation::class,
        'admin.permission' => Permission::class,
        'admin.bootstrap'  => Bootstrap::class,
        'admin.session'    => Session::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array
     */
    protected $middlewareGroups = [
        'admin' => [
            'admin.auth',
            'admin.pjax',
            'admin.log',
            'admin.bootstrap',
            'admin.permission',
            //            'admin.session',
        ],
    ];

    /**
     * Boot the service provider.
     *
     * @return void
     */
    public function boot()
    {
        include base_path('Admin/Helpers/admin.php');

        $this->loadViewsFrom(base_path('Admin/resources/views'), 'admin');

        $this->ensureHttps();

        $this->loadRoutesFrom(base_path('Admin/routes/web.php'));


        $this->compatibleBlade();

        Blade::directive('box', function ($title) {
            return "<?php \$box = new \Admin\Widgets\Box({$title}, '";
        });

        Blade::directive('endbox', function ($expression) {
            return "'); echo \$box->render(); ?>";
        });
    }

    /**
     * Force to set https scheme if https enabled.
     *
     * @return void
     */
    protected function ensureHttps()
    {
        $is_admin = Str::startsWith(request()->getRequestUri(), '/'.ltrim(config('admin.route.prefix'), '/'));
        if ((config('admin.https') || config('admin.secure')) && $is_admin) {
            url()->forceScheme('https');
            $this->app['request']->server->set('HTTPS', true);
        }
    }

    /**
     * Remove default feature of double encoding enable in laravel 5.6 or later.
     *
     * @return void
     */
    protected function compatibleBlade()
    {
        $reflectionClass = new \ReflectionClass('\Illuminate\View\Compilers\BladeCompiler');

        if ($reflectionClass->hasMethod('withoutDoubleEncoding')) {
            Blade::withoutDoubleEncoding();
        }
    }

    /**
     * Extends laravel router.
     */
    protected function macroRouter()
    {
        Router::macro('content', function ($uri, $content, $options = []) {
            return $this->match(['GET', 'HEAD'], $uri, function (Content $layout) use ($content, $options) {
                return $layout
                    ->title(Arr::get($options, 'title', ' '))
                    ->description(Arr::get($options, 'desc', ' '))
                    ->body($content);
            });
        });

        Router::macro('component', function ($uri, $component, $data = [], $options = []) {
            return $this->match(['GET', 'HEAD'], $uri, function (Content $layout) use ($component, $data, $options) {
                return $layout
                    ->title(Arr::get($options, 'title', ' '))
                    ->description(Arr::get($options, 'desc', ' '))
                    ->component($component, $data);
            });
        });
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        $this->loadAdminAuthConfig();

        $this->registerRouteMiddleware();

        $this->commands($this->commands);

        $this->macroRouter();
    }

    /**
     * Setup auth configuration.
     *
     * @return void
     */
    protected function loadAdminAuthConfig()
    {
        config(Arr::dot(config('admin.auth', []), 'auth.'));
    }

    /**
     * Register the route middleware.
     *
     * @return void
     */
    protected function registerRouteMiddleware()
    {
        // register route middleware.
        foreach ($this->routeMiddleware as $key => $middleware) {
            app('router')->aliasMiddleware($key, $middleware);
        }

        // register middleware group.
        foreach ($this->middlewareGroups as $key => $middleware) {
            app('router')->middlewareGroup($key, $middleware);
        }
    }
}
